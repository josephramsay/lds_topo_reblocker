---

################################################################################
#
# Copyright 2013 Crown copyright (c)
# Land Information New Zealand and the New Zealand Government.
# All rights reserved
#
# This program is released under the terms of the new BSD license. See the
# LICENSE file for more information.
#
################################################################################

#
### DATABASE SERVICE TESTS ###
#

- name: Create a unique test ID
  shell: >
    date +"%s"
  register: test_id_sum

- name: Set a unique test ID
  set_fact:
    test_id: "{{ test_id_sum.stdout|trim }}"


### POSTGRESQL
- name: Test if PostgreSQL is up and running
  shell: >
    psql
    -v ON_ERROR_STOP=yes
    -tAc "SELECT version()"
  become: yes
  become_user: postgres


- name: Detect WAL files directory (pg_xlog) information
  stat:
    path: /store/postgresql/pg_xlog
  register: test_xlog_dir
  become: yes

- name: Test if WAL files directory (pg_xlog) is symlink
  assert:
    that:
      - test_xlog_dir.stat.islnk
        and
        test_xlog_dir.stat.lnk_source == '/store/postgresql_xlog'


### DATABASE
- name: Create test database
  postgresql_db:
    name: "{{ test_db }}"
    encoding: 'UTF-8'
    template: template_postgis
    state: present
  become: yes
  become_user: postgres


### BACKUP AND RECOVERY
# backup
- name: Perform test PostgreSQL cluster backup
  shell: /opt/database/pg_backup
  become: yes


# test table
- name: Create test database table
  shell: >
    psql
    -v ON_ERROR_STOP=yes
    -d {{ test_db }}
    -c "CREATE TABLE test (id serial, a text)"
  become: yes
  become_user: postgres


# first data batch
- name: Insert first batch of data to test table
  shell: >
    psql
    -v ON_ERROR_STOP=yes
    -d {{ test_db }}
    -c "INSERT INTO test (a) (SELECT generate_series(1, 500))"
  args:
    executable: /bin/bash
  become: yes
  become_user: postgres

- name: Force switch to a new transaction log file
  shell: >
    psql
    -v ON_ERROR_STOP=yes
    -c "SELECT pg_switch_xlog()"
  become: yes
  become_user: postgres

- name: Get point-in-time recovery time
  shell: >
    sleep 3
    &&
    date '+%Y-%m-%d %H:%M:%S'
    &&
    sleep 3
  register: test_recovery_time


# second data batch
- name: Insert second batch of data to test table
  shell: >
    psql
    -v ON_ERROR_STOP=yes
    -d {{ test_db }}
    -c "INSERT INTO test (a) (SELECT generate_series(1, 500))"
  args:
    executable: /bin/bash
  become: yes
  become_user: postgres

- name: Force switch to a new transaction log file
  shell: >
    psql
    -v ON_ERROR_STOP=yes
    -c "SELECT pg_switch_xlog()"
  become: yes
  become_user: postgres


# point-in-time recovery
- name: Turn PostgreSQL off
  service:
    name: postgresql
    state: stopped
  become: yes

- name: Run point-in-time PostgreSQL cluster recovery
  shell: >
    PG_RESTORE_NONINTERACTIVE=yes
    /opt/database/pg_restore '{{ test_recovery_time.stdout }}'
  become: yes

- name: Turn PostgreSQL on and launch recovery
  service:
    name: postgresql
    state: started
  become: yes

- name: Wait until recovery finished
  wait_for:
    path: /store/postgresql/recovery.done
  become: yes

- name: Test point-in-time PostgreSQL cluster recovery
  shell: >
    psql
    -v ON_ERROR_STOP=yes
    -d {{ test_db }}
    -tAc
    "
    SELECT MAX(id) FROM test
    "
    |
    grep -e "^500$"
  become: yes
  become_user: postgres


# end-of-WAL recovery
- name: Turn PostgreSQL off
  service:
    name: postgresql
    state: stopped
  become: yes

- name: Run end-of-WAL PostgreSQL cluster recovery
  shell: >
    PG_RESTORE_NONINTERACTIVE=yes
    /opt/database/pg_restore
  become: yes

- name: Turn PostgreSQL on and launch recovery
  service:
    name: postgresql
    state: started
  become: yes

- name: Wait until recovery finished
  wait_for:
    path: /store/postgresql/recovery.done
  become: yes

- name: Test end-of-WAL PostgreSQL cluster recovery
  shell: >
    psql
    -v ON_ERROR_STOP=yes
    -d {{ test_db }}
    -tAc
    "
    SELECT MAX(id) FROM test
    "
    |
    grep -e "^1000$"
  become: yes
  become_user: postgres


### CLEANUP
- name: Remove test database
  postgresql_db:
    name: "{{ test_db }}"
    state: absent
  become: yes
  become_user: postgres

- name: Remove original PostgreSQL data backups done by pg_restore
  shell: >
    rm -r /store/postgresql/backup-*
    &&
    rm -r /store/postgresql_xlog/backup-*
  become: yes


### POSTGRESQL
- name: Detect WAL files directory (pg_xlog) information
  stat:
    path: /store/postgresql/pg_xlog
  register: test_xlog_dir
  become: yes

- name: Test if WAL files directory (pg_xlog) is symlink after restore
  assert:
    that:
      - test_xlog_dir.stat.islnk
        and
        test_xlog_dir.stat.lnk_source == '/store/postgresql_xlog'


### MONITORING
- name: Test if monitoring queries are working
  shell: >
    /usr/lib/nagios/plugins/check_nrpe
    -H localhost
    -c {{ item }}
  with_items:
    - check_database_running
    - check_database_backup

# vim: set ts=2 sts=2 sw=2 et:
