---

################################################################################
#
# Copyright 2013 Crown copyright (c)
# Land Information New Zealand and the New Zealand Government.
# All rights reserved
#
# This program is released under the terms of the new BSD license. See the
# LICENSE file for more information.
#
################################################################################

- name: Install packages
  apt:
    pkg: "{{ item }}"
    force: yes
    install_recommends: no
    state: latest
  with_items:
    - python-psycopg2
    - postgresql-{{ DB_PSQL_VERSION }}
    - postgresql-contrib-{{ DB_PSQL_VERSION }}
    - postgresql-{{ DB_PSQL_VERSION }}-postgis-{{ DB_PGIS_VERSION }}
    - postgresql-{{ DB_PSQL_VERSION }}-postgis-{{ DB_PGIS_VERSION }}-scripts
  environment: "{{ apt_proxy }}"
  become: yes

- name: Install PostgreSQL DBPatch extension
  apt:
    pkg: "{{ item }}"
    force: yes
    install_recommends: no
    state: latest
  with_items:
    - postgresql-{{ DB_PSQL_VERSION }}-dbpatch
  environment: "{{ apt_proxy }}"
  become: yes
  when: DB_EXTENSION_DBPATCH

- name: Install PostgreSQL table_version extension
  apt:
    pkg: "{{ item }}"
    force: yes
    install_recommends: no
    state: latest
  with_items:
    - postgresql-{{ DB_PSQL_VERSION }}-tableversion
  environment: "{{ apt_proxy }}"
  become: yes
  when: DB_EXTENSION_TABLE_VERSION


### STORAGE
- name: Drop initial PostgreSQL cluster
  shell: >
    pg_dropcluster
    --stop
    {{ DB_PSQL_VERSION }} main
  args:
    removes: /var/lib/postgresql/{{ DB_PSQL_VERSION }}/main/PG_VERSION
  become: yes

- name: Create PostgreSQL cluster data storage directory
  file:
    path: "{{ pgsql_data_dir }}"
    state: directory
    owner: postgres
    group: postgres
  become: yes

- name: Create PostgreSQL xlog storage directory
  file:
    path: "{{ pgsql_xlog_dir }}"
    state: directory
    owner: postgres
    group: postgres
  become: yes

- name: Create PostgreSQL archive storage directory
  file:
    path: "{{ pgsql_archive_dir }}"
    state: directory
    owner: postgres
    group: postgres
  become: yes

- name: Create PostgreSQL backup storage directory
  file:
    path: "{{ pgsql_backup_dir}}"
    state: directory
    owner: postgres
    group: postgres
  become: yes


- name: Generate required PostgreSQL locale
  locale_gen:
    name: "{{ DB_LOCALE }}"
    state: present
  become: yes

- name: Install PostgreSQL cluster creation configuration
  template:
    src: postgresql/createcluster.conf.j2
    dest: /etc/postgresql-common/createcluster.conf
  become: yes

- name: Create PostgreSQL cluster
  shell: >
    pg_createcluster
    --locale {{ DB_LOCALE }}
    --datadir={{ pgsql_data_dir }}
    --start
    {{ DB_PSQL_VERSION }} main
  args:
    creates: "{{ pgsql_data_dir }}/PG_VERSION"
  become: yes


### CONFIGURATION
- name: Create PostgreSQL configuration directory
  file:
    path: "{{ pgsql_config_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: 0755
  become: yes

- name: Enable PostgreSQL configuration directory
  lineinfile:
    dest: "/etc/postgresql/{{ DB_PSQL_VERSION }}/main/postgresql.conf"
    regexp: ".*include_dir.*="
    line: "include_dir = '{{ pgsql_config_dir }}'"
    state: present
  notify:
    - service postgresql restart
  become: yes


- name: Install PostgreSQL configuration
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - {
        src: postgresql/postgresql-base.conf.j2,
        dest: "{{ pgsql_config_dir }}/10-postgresql-base.conf"
      }
    - {
        src: postgresql/postgresql-archive.conf.j2,
        dest: "{{ pgsql_config_dir }}/20-postgresql-archive.conf"
      }
  notify:
    - service postgresql restart
  become: yes


- name: Install tuned PostgreSQL configuration
  postgresql_tune:
    db_version: "{{ DB_PSQL_VERSION }}"
    db_type: dw
    total_memory: "{{ ansible_memtotal_mb }}MB"
    max_connections: "{{ DB_CONNECTIONS }}"
    postgresql_file: "{{ pgsql_config_dir }}/90-postgresql-tune.conf"
    sysctl_file: "/etc/sysctl.d/90-postgresql-tune.conf"
  notify:
    - service postgresql restart
    - sysctl postgresql reload
  become: yes


- name: Configure PostgreSQL access policy
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - {
        src: postgresql/pg_hba.conf.j2,
        dest: "/etc/postgresql/{{ DB_PSQL_VERSION }}/main/pg_hba.conf"
      }
    - {
        src: postgresql/pg_ident.conf.j2,
        dest: "/etc/postgresql/{{ DB_PSQL_VERSION }}/main/pg_ident.conf"
      }
  notify:
    - service postgresql restart
  become: yes


### USER ACCOUNTS
- name : Create DBA system user account
  user:
    name: dba
    comment: PostgreSQL DBA
    system: yes
    state: present
  become: yes

- name: Create database DBA role
  postgresql_user:
    name: dba
    role_attr_flags: SUPERUSER,CREATEDB,CREATEROLE,LOGIN
    state: present
  become: yes
  become_user: postgres


### TEMPLATES
# template creation
- name: Remove template status from PostGIS template database
  command: >
    psql
    -v ON_ERROR_STOP=yes
    -c "UPDATE pg_database SET datistemplate='false' WHERE datname='{{ item }}';"
  with_items:
    - template_postgis
  become: yes
  become_user: postgres

- name: Drop PostGIS template database
  postgresql_db:
    name: "{{ item }}"
    state: absent
  with_items:
    - template_postgis
  become: yes
  become_user: postgres


- name: Create PostGIS template database
  postgresql_db:
    name: template_postgis
    encoding: 'UTF-8'
    template: template0
    state: present
  become: yes
  become_user: postgres


# extensions
- name: Install PostGIS extensions to PostGIS template database
  postgresql_ext:
    name: "{{ item }}"
    db: template_postgis
    login_user: dba
    state: present
  with_items:
    - postgis
    - postgis_topology
  become: yes
  become_user: dba  # use dba user to set correct owner to all created objects

- name: Install extra extensions to PostGIS template database
  postgresql_ext:
    name: "{{ item }}"
    db: template_postgis
    login_user: dba
    state: present
  with_items: "{{ DB_EXTENSIONS }}"
  become: yes
  become_user: dba  # use dba user to set correct owner to all created objects

- name: Install table_version extension to PostGIS template
  postgresql_ext:
    name: table_version
    db: template_postgis
    login_user: dba
    state: present
  with_items: "{{ DB_EXTENSIONS }}"
  become: yes
  become_user: dba  # use dba user to set correct owner to all created objects
  when: DB_EXTENSION_TABLE_VERSION

- name: Install dbpatch extension to PostGIS template
  command: >
    psql
    -v ON_ERROR_STOP=yes
    -d template_postgis
    -c "{{ item }}"
  with_items:
    - CREATE SCHEMA _patches
    - CREATE EXTENSION dbpatch SCHEMA _patches
  become: yes
  become_user: dba  # use dba user to set correct owner to all created objects
  when: DB_EXTENSION_DBPATCH


# permissions
- name: Set permissions to PostGIS template database
  command: >
    psql
    -v ON_ERROR_STOP=yes
    -d template_postgis
    -c "{{ item }}"
  with_items:
    - REVOKE ALL ON SCHEMA public FROM PUBLIC

    - GRANT USAGE ON SCHEMA public TO PUBLIC
    - GRANT ALL ON SCHEMA public TO dba

    - GRANT SELECT, UPDATE, INSERT, DELETE ON geometry_columns TO PUBLIC
    - GRANT SELECT, UPDATE, INSERT, DELETE ON geography_columns TO PUBLIC
    - GRANT SELECT, UPDATE, INSERT, DELETE ON spatial_ref_sys TO PUBLIC

    - GRANT USAGE ON SCHEMA topology TO PUBLIC
    - GRANT SELECT, UPDATE, INSERT, DELETE ON topology.layer TO PUBLIC
    - GRANT SELECT, UPDATE, INSERT, DELETE ON topology.topology TO PUBLIC
  become: yes
  become_user: postgres


# cleanup
- name: Vacuum FULL PostGIS template database
  command: >
    psql
    -v ON_ERROR_STOP=yes
    -d template_postgis
    -c "VACUUM FULL;"
  become: yes
  become_user: postgres

- name: Vacuum FREEZE PostGIS template database
  command: >
    psql
    -v ON_ERROR_STOP=yes
    -d template_postgis
    -c "VACUUM FREEZE;"
  become: yes
  become_user: postgres


# finish
- name: Set template status to PostGIS template database
  command: >
    psql
    -v ON_ERROR_STOP=yes
    -c "UPDATE pg_database SET datistemplate='true' WHERE datname='{{ item }}';"
  with_items:
    - template_postgis
  become: yes
  become_user: postgres

- name: Do not accept any connections to PostGIS template database
  command: >
    psql
    -v ON_ERROR_STOP=yes
    -c "UPDATE pg_database SET datallowconn='false' WHERE datname='{{ item }}';"
  with_items:
    - template_postgis
  become: yes
  become_user: postgres


### SCRIPTS
- name: Create database scripts directory
  file:
    path: /opt/database
    state: directory
    mode: 0755
  become: yes

- name: Install database scripts
  copy:
    src: scripts/
    dest: /opt/database/
    mode: 0755
    force: yes
  become: yes


### JOBS
- name: Install PostgreSQL backup cron jobs
  template:
    src: cron/pg_backup.j2
    dest: /etc/cron.d/pg_backup
  become: yes

# vim: set ts=2 sts=2 sw=2 et:
