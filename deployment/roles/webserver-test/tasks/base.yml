---

################################################################################
#
# Copyright 2013 Crown copyright (c)
# Land Information New Zealand and the New Zealand Government.
# All rights reserved
#
# This program is released under the terms of the new BSD license. See the
# LICENSE file for more information.
#
################################################################################

#
### BDE PROCESSOR TESTS ###
#

- name: Create a unique test ID
  shell: >
    date +"%s"
  register: test_id_sum

- name: Set a unique test ID
  set_fact:
    test_id: "{{ test_id_sum.stdout|trim }}"


### CONFIGURATION
- name: Create BDE configuration directory
  file:
    path: "{{ test_bde_config_dir }}"
    state: directory

- name: Copy BDE uploader configuration files
  shell: >
    cp
    /etc/linz-bde-uploader/{{ item }}
    {{ test_bde_config_dir }}/{{ item }}
  with_items:
    - linz_bde_uploader.conf
    - tables.conf

- name: Install test BDE uploader configuration
  template:
    src: linz_bde_uploader/linz_bde_uploader.conf.j2
    dest: "{{ test_bde_config_dir }}/linz_bde_uploader.conf.{{ test_bde_database_name }}"
  become: yes


### DATA
- name: Create BDE data directory (will not be removed after test)
  file:
    path: "{{ test_bde_data_dir }}"
    state: directory
    recurse: yes
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  become: yes


- name: Download BDE test dataset
  get_url:
    url: "{{ test_bde_data_url }}/{{ item }}"
    dest: "{{ test_bde_data_dir }}/{{ item }}"
  with_items:
    - ta_bdys_sample_data.dump
    - "{{ BDE_TEST_DATASET }}"
  environment: "{{ web_proxy }}"

- name: Unpack BDE test dataset
  unarchive:
    src: "{{ test_bde_data_dir }}/bde_sample_data_small.tar.gz"
    dest: "{{ test_bde_data_dir }}"
    copy: no
    creates: "{{ test_bde_data_dir }}/data"


### DATABASE
- name: Create clean BDE test database
  postgresql_db:
    name: "{{ test_bde_database_name }}_clean"
    owner: bde
    encoding: 'UTF-8'
    template: template_bde
    state: present
  become: yes
  become_user: postgres


# boundaries
- name: Create admin_bdys database schema
  shell: >
    psql
    -v ON_ERROR_STOP=yes
    -d {{ test_bde_database_name }}_clean
    -c "CREATE SCHEMA IF NOT EXISTS admin_bdys"
  become: yes
  become_user: bde

- name: Upload TA boundaries to database
  shell: >
    pg_restore
    -d {{ test_bde_database_name }}_clean
    {{ test_bde_data_dir }}/ta_bdys_sample_data.dump
  become: yes
  become_user: bde


### UPLOAD
# BDE (linz_bde_uploader)
# database
- name: Create BDE test (linz_bde_uploader) database
  shell: >
    createdb {{ test_bde_database_name }}
    &&
    pg_dump {{ test_bde_database_name }}_clean
    |
    psql {{ test_bde_database_name }} > /dev/null
  become: yes
  become_user: postgres


# level 0 full upload
- name: Upload BDE level 0 (full) data to database
  shell: >
    linz_bde_uploader
    -full
    -before 20150701
    -config-path {{ test_bde_config_dir }}/linz_bde_uploader.conf
    -config-extension {{ test_bde_database_name }}
    -verbose
    -log-level WARN
  become: yes
  become_user: bde

- name: Test if BDE level 0 (full) upload was successful
  shell: >
    psql
    -v ON_ERROR_STOP=yes
    -d {{ test_bde_database_name }}
    -tAc
    "
    SELECT COUNT(*) FROM bde_control.upload
    WHERE status = 'C'
    "
    |
    grep -e "^1$"
  become: yes
  become_user: bde


- name: Enable versioning
  shell:
    psql
    -v ON_ERROR_STOP=yes
    -d {{ test_bde_database_name }}
    -f {{ item }}
  with_items:
    - /usr/share/linz-bde-schema/sql/versioning/01-version_tables.sql
    - /usr/share/linz-lds-bde-schema/sql/versioning/01-version_tables.sql
  become: yes
  become_user: postgres  # must be executed with superuser permissions


# level 5 incremental upload
- name: Upload BDE level 5 (incremental) data to database
  shell: >
    linz_bde_uploader
    -incremental
    -config-path {{ test_bde_config_dir }}/linz_bde_uploader.conf
    -config-extension {{ test_bde_database_name }}
    -verbose
    -log-level WARN
  become: yes
  become_user: bde

- name: Test if BDE level 5 (incremental) upload was successful
  shell: >
    psql
    -v ON_ERROR_STOP=yes
    -d {{ test_bde_database_name }}
    -tAc
    "
    SELECT COUNT(*) FROM bde_control.upload
    WHERE status = 'C'
    "
    |
    grep -e "^2$"
  become: yes
  become_user: bde


# level 0 full-incremental upload
- name: Upload BDE level 0 (full-incremental) data again to database
  shell: >
    linz_bde_uploader
    -full-incremental
    -before $(date +%Y%m%d)
    -config-path {{ test_bde_config_dir }}/linz_bde_uploader.conf
    -config-extension {{ test_bde_database_name }}
    -verbose
    -log-level WARN
  become: yes
  become_user: bde

- name: Test if BDE level 0 (full-incremental) upload was successful
  shell: >
    psql
    -v ON_ERROR_STOP=yes
    -d {{ test_bde_database_name }}
    -tAc
    "
    SELECT COUNT(*) FROM bde_control.upload
    WHERE status = 'C'
    "
    |
    grep -e "^3$"
  become: yes
  become_user: bde

- name: Test if BDE level 0 (full-incremental) upload was without changes
  shell: >
    psql
    -v ON_ERROR_STOP=yes
    -d {{ test_bde_database_name }}
    -tAc
    "
    SELECT COUNT(*)
    FROM bde_control.upload_table TBL
    JOIN bde_control.upload_stats STA ON STA.tbl_id = TBL.id
    WHERE
    TBL.last_upload_dataset = STA.dataset AND
    STA.type = '0' AND
    (
    STA.ninsert != 0 OR
    STA.nupdate != 0 OR
    STA.nnullupdate != 0 OR
    STA.ndelete != 0
    )
    "
    |
    grep -e "^0$"
  become: yes
  become_user: bde


# database cleanup
- name: Remove BDE test database
  postgresql_db:
    name: "{{ test_bde_database_name }}"
    state: absent
  become: yes
  become_user: postgres


# BDE (bde_upload wrapper)
# database
- name: Create BDE test (linz_bde_uploader) database
  shell: >
    createdb {{ test_bde_database_name }}
    &&
    pg_dump {{ test_bde_database_name }}_clean
    |
    psql {{ test_bde_database_name }} > /dev/null
  become: yes
  become_user: postgres


# level 0 upload
- name: Upload BDE level 0 (bde_upload) data to database
  shell: >
    /opt/bde-processor/bde_upload
    {{ test_bde_database_name }}
    {{ test_bde_config_dir }}/linz_bde_uploader
    -before 20150701
  become: yes
  become_user: bde

- name: Test if BDE level 0 (bde_upload) upload was successful
  shell: >
    psql
    -v ON_ERROR_STOP=yes
    -d {{ test_bde_database_name }}
    -tAc
    "
    SELECT COUNT(*) FROM bde_control.upload
    WHERE status = 'C'
    "
    |
    grep -e "^1$"
  become: yes
  become_user: bde


- name: Upload BDE level 5 (bde_upload) data to database
  shell: >
    /opt/bde-processor/bde_upload
    {{ test_bde_database_name }}
    {{ test_bde_config_dir }}/linz_bde_uploader
  become: yes
  become_user: bde

- name: Test if BDE level 5 (bde_upload) upload was successful
  shell: >
    psql
    -v ON_ERROR_STOP=yes
    -d {{ test_bde_database_name }}
    -tAc
    "
    SELECT COUNT(*) FROM bde_control.upload
    WHERE status = 'C'
    "
    |
    grep -e "^2$"
  become: yes
  become_user: bde


# database cleanup
- name: Remove BDE test database
  postgresql_db:
    name: "{{ test_bde_database_name }}"
    state: absent
  become: yes
  become_user: postgres


### CLEANUP
- name: Remove clean BDE test database
  postgresql_db:
    name: "{{ test_bde_database_name }}_clean"
    state: absent
  become: yes
  become_user: postgres

- name: Remove BDE test temporary directories
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ test_bde_config_dir }}"
    - "{{ test_bde_tmp_base_dir }}"
  become: yes

# vim: set ts=2 sts=2 sw=2 et:
